{"version":3,"sources":["api/youtube.js","components/Video.js","components/Searchbar.js","components/Videolist.js","App.js","serviceWorker.js","index.js"],"names":["GetYoutube","serchText","a","Search_Text","console","log","searchParam","items","axios","get","Video","video","videoSrc","id","videoId","className","frameBorder","height","width","title","src","Searchbar","onSubmit","useState","searchText","setSearchText","type","placeholder","value","onChange","e","target","onKeyPress","key","onClick","Videolist","videos","map","index","snippet","alt","thumbnails","medium","url","App","videoList","setVideoList","selectedVideo","setSelectedVideo","handleSearch","data","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAuBeA,EArBC,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,2GAGC,0CACVC,EAAcF,EAJL,SAOXG,QAAQC,IAAI,sBACRC,EARO,iGAQ6CH,EAR7C,gBAGC,2CAORI,EAAQC,IAAMC,IAAIH,GACtBF,QAAQC,IAAIC,GAXD,kBAaJC,GAbI,2DAgBJ,wCAhBI,0DAAH,sDCgCDG,MAhCf,YAA2B,IAAVC,EAAS,EAATA,MAETC,EAAW,GAajB,OAVOA,EAFFD,EAEU,wCAAoCA,EAAME,GAAGC,SAI3C,GAIjBV,QAAQC,IAAIM,GAGV,yBAAMI,UAAU,iBACbJ,EACC,4BACEK,YAAY,IACZC,OAAO,OACPC,MAAM,OACNC,MAAM,eACNC,IAAKR,IAGP,KCAOS,MA1Bf,YAAkC,IAAbC,EAAY,EAAZA,SAAY,EACKC,mBAAS,IADd,mBACxBC,EADwB,KACZC,EADY,KAU/B,OACE,6BACE,2BACEC,KAAK,OACLC,YAAY,YACZC,MAAOJ,EACPK,SAAU,SAACC,GACTL,EAAcK,EAAEC,OAAOH,QAEzBI,WAhBW,SAACF,GACD,UAAVA,EAAEG,KAEHX,EAASE,MAeX,4BAAQU,QAASZ,GAAjB,SCHSa,MAlBf,YAA8B,IAAVC,EAAS,EAATA,OAIlB,OACE,6BAEIA,EAASA,EAAOC,KAAI,SAAC1B,EAAQ2B,GAAT,OACpB,yBAAKL,IAAKK,GACV,2BAAI3B,EAAM4B,QAAQpB,OAClB,yBAAKqB,IAAI,YAAYpB,IAAKT,EAAM4B,QAAQE,WAAWC,OAAOC,UAEpD,KCsBCC,MA7Bf,WAAe,MAEqBrB,mBAAS,IAF9B,mBAENsB,EAFM,KAEKC,EAFL,OAG6BvB,mBAAS,MAHtC,mBAGNwB,EAHM,KAGSC,EAHT,KAKPC,EAAY,uCAAG,WAAOhD,GAAP,iBAAAC,EAAA,6DACnBE,QAAQC,IAAI,oBADO,SAITL,EAAWC,GAJF,gBAGTM,EAHS,EAGjB2C,KAAQ3C,MAGVuC,EAAavC,GACbyC,EAAiBzC,EAAM,IAPJ,2CAAH,sDAclB,OAJA4C,qBAAU,WACRF,MACA,IAGA,yBAAKlC,UAAU,aAAf,UAEE,kBAAC,EAAD,CAAWA,UAAU,YAAYO,SAAU2B,IAC3C,kBAAC,EAAD,CAAOtC,MAAOoC,IACd,kBAAC,EAAD,CAAWX,OAAQS,MCnBLO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.a377133d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst GetYoutube = async (serchText)=>{\r\n\r\n    const URL = `https://www.googleapis.com/youtube/v3/search`;\r\n    const API_KEY = 'AIzaSyDB4Hd9ZOdpN5q6SEAxZ0NJ1yrqLCNytZs';\r\n    const Search_Text = serchText;\r\n\r\n    try {\r\n        console.log('youtube.GetYoutube');\r\n        let searchParam = `${URL}?part=snippet&maxResults=5&q=${Search_Text}&key=${API_KEY}`; \r\n\r\n        let items = axios.get(searchParam);\r\n        console.log(searchParam);\r\n\r\n        return items;\r\n\r\n    } catch (error) {\r\n        return 'line 12 youtube.GetYoutube() , ' + error;\r\n    }\r\n\r\n}\r\n\r\nexport default GetYoutube;","import React from \"react\";\r\n\r\nfunction Video({ video }) {\r\n\r\n    let videoSrc = '';\r\n    if(video)\r\n    {\r\n         videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n    }\r\n    else\r\n    {\r\n        videoSrc = '';\r\n    }\r\n  \r\n\r\n  console.log(video);\r\n\r\n  return (\r\n    <div  className=\"selectedVideo\">\r\n      {video ? (\r\n        <iframe\r\n          frameBorder=\"0\"\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n          title=\"Video Player\"\r\n          src={videoSrc}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Video;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Searchbar({ onSubmit }) {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const onEnter = ((e)=>{\r\n      if(e.key === 'Enter')\r\n      {\r\n        onSubmit(searchText);\r\n      }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={searchText}\r\n        onChange={(e) => {\r\n          setSearchText(e.target.value);\r\n        }}\r\n        onKeyPress={onEnter}\r\n      />\r\n      <button onClick={onSubmit} >Get</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\n\r\nfunction Videolist({videos}) {\r\n\r\n  // console.log(videos);\r\n  \r\n  return (\r\n    <div>\r\n      { \r\n        videos ? videos.map((video , index) => (\r\n        <div key={index}>  \r\n        <p>{video.snippet.title}</p>\r\n        <img alt=\"thumbnail\" src={video.snippet.thumbnails.medium.url} />\r\n        </div>\r\n        ) ) : ''\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Videolist;","import React, { useState ,useEffect } from \"react\";\nimport \"./App.css\";\nimport GetYoutube from \"./api/youtube\";\nimport Video from \"./components/Video\";\nimport Searchbar from \"./components/Searchbar\";\nimport Videolist from \"./components/Videolist\";\n\nfunction App() {\n  // const [serchText, setSearchText] = useState(\"\");\n  const [videoList, setVideoList] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n  const handleSearch = async (serchText) => {\n    console.log('App.handleSearch');\n    const {\n      data: { items },\n    } = await GetYoutube(serchText);\n\n    setVideoList(items);\n    setSelectedVideo(items[0]);\n  };\n\n  useEffect(()=>{\n    handleSearch();\n  },[]);\n\n  return (\n    <div className=\"container\">\n      GooTube\n      <Searchbar className=\"searchBar\" onSubmit={handleSearch}  />\n      <Video video={selectedVideo} />\n      <Videolist videos={videoList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}