{"version":3,"sources":["contexts/VideoContext.js","components/Video.js","api/youtube.js","components/Searchbar.js","components/Videolist.js","App.js","serviceWorker.js","index.js"],"names":["VideoContext","createContext","Video","useContext","videoList","videoSelected","videoSrc","length","id","videoId","className","frameBorder","title","src","GetYoutube","serchText","a","Search_Text","searchParam","items","axios","get","console","log","Searchbar","setVideoList","searchRef","useRef","handleSearch","current","value","data","useEffect","type","placeholder","ref","onKeyPress","e","key","onClick","Videolist","setVideoSelected","map","video","index","snippet","alt","thumbnails","medium","url","width","height","App","useState","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAKeA,G,MAHMC,2B,MC6BNC,MA3Bf,WAAkB,IAAD,EACsBC,qBAAWH,GAAxCI,EADO,EACPA,UAAWC,EADJ,EACIA,cAEfC,EAAW,GAQf,OANEA,EADEF,EAAUG,OAAS,GAA8B,qBAAlBF,EACzB,wCAAoCD,EAAU,GAAGI,GAAGC,SACnDL,EAAUG,OAAS,GAA8B,qBAAlBF,EAChC,wCAAoCD,EAAUC,GAAeG,GAAGC,SAE7D,GAGX,yBAAKC,UAAU,mBACZN,EACC,4BACEO,YAAY,IACZD,UAAU,iBACVE,MAAM,eACNC,IAAKP,IAGP,K,wCCPOQ,EAhBC,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,2GAED,0CACVC,EAAcF,EAHH,SAMXG,EANW,iGAMyCD,EANzC,gBAED,2CAMVE,EAAQC,IAAMC,IAAIH,GARP,kBAURC,GAVQ,gCAYfG,QAAQC,IAAR,gDAZe,yDAAH,sD,MC+CDC,MA5Cf,WAAsB,IACZC,EAAiBtB,qBAAWH,GAA5ByB,aACFC,EAAYC,mBAQZC,EAAY,uCAAG,8BAAAZ,EAAA,+EAIPF,EAAWY,EAAUG,QAAQC,OAJtB,gBAGPX,EAHO,EAGfY,KAAQZ,MAGVM,EAAaN,GANI,gDASjBG,QAAQC,IAAR,yBATiB,yDAAH,qDAkBlB,OALAS,qBAAU,WACRJ,MAEC,IAGD,yBAAKlB,UAAU,uBACb,2BACEuB,KAAK,OACLC,YAAY,YACZC,IAAKT,EACLU,WA9BU,SAACC,GACD,UAAVA,EAAEC,KACJV,KA6BElB,UAAU,iBAEZ,4BAAQ6B,QAAS,kBAAKX,GAAclB,UAAU,cAA9C,Y,MCfS8B,MAvBf,WAAsB,IAAD,EACqBrC,qBAAWH,GAA3CI,EADW,EACXA,UAAWqC,EADA,EACAA,iBAEnB,OACE,yBAAK/B,UAAU,uBACZN,EACGA,EAAUsC,KAAI,SAACC,EAAOC,GAAR,OACZ,yBAAKN,IAAKM,GACR,2BAAID,EAAME,QAAQjC,OAClB,yBACEkC,IAAI,YACJjC,IAAK8B,EAAME,QAAQE,WAAWC,OAAOC,IACrCV,QAAS,kBAAME,EAAiBG,IAChCM,MAAO,IACPC,OAAQ,UAId,KCEKC,MAjBf,WAAgB,IAAD,EAEwBC,mBAAS,IAFjC,mBAELjD,EAFK,KAEOqB,EAFP,OAGgC4B,qBAHhC,mBAGLhD,EAHK,KAGWoC,EAHX,KAKb,OACE,yBAAK/B,UAAU,aAAf,cAEE,kBAAC,EAAa4C,SAAd,CAAuBxB,MAAO,CAAE1B,YAAYqB,eAAepB,gBAAgBoC,qBAC3E,kBAAC,EAAD,CAAW/B,UAAU,cACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.c020df57.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst VideoContext = createContext();;\r\n\r\n\r\nexport default VideoContext;","import React, { useContext } from \"react\";\r\nimport VideoContext from \"../contexts/VideoContext\";\r\nimport \"./Video.css\";\r\n\r\nfunction Video() {\r\n  const { videoList, videoSelected } = useContext(VideoContext);\r\n\r\n  let videoSrc = \"\";\r\n  if (videoList.length > 0 && typeof videoSelected === \"undefined\") {\r\n    videoSrc = `https://www.youtube.com/embed/${videoList[0].id.videoId}`;\r\n  } else if (videoList.length > 0 && typeof videoSelected !== \"undefined\") {\r\n    videoSrc = `https://www.youtube.com/embed/${videoList[videoSelected].id.videoId}`;\r\n  } else {\r\n    videoSrc = \"\";\r\n  }\r\n  return (\r\n    <div className=\"container-video\">\r\n      {videoList ? (\r\n        <iframe\r\n          frameBorder=\"0\"\r\n          className=\"selected-video\"\r\n          title=\"Video Player\"\r\n          src={videoSrc}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Video;\r\n","import axios from \"axios\";\r\n\r\nconst GetYoutube = async (serchText) => {\r\n  const URL = `https://www.googleapis.com/youtube/v3/search`;\r\n  const API_KEY = \"AIzaSyBVoVuCh0rFVpS7Qd--jDYNZeTZMiHKnu0\";\r\n  const Search_Text = serchText;\r\n\r\n  try {\r\n    let searchParam = `${URL}?part=snippet&maxResults=5&q=${Search_Text}&key=${API_KEY}`;\r\n\r\n    let items = axios.get(searchParam);\r\n\r\n    return items;\r\n  } catch (error) {\r\n    console.log(`Error : api/youtube/GetYoutube ${error}`);\r\n  }\r\n};\r\n\r\nexport default GetYoutube;\r\n","import React, { useContext, useRef, useEffect } from \"react\";\r\nimport GetYoutube from \"../api/youtube\";\r\nimport VideoContext from \"../contexts/VideoContext\";\r\nimport \"./Searchbar.css\";\r\n\r\nfunction Searchbar() {\r\n  const { setVideoList } = useContext(VideoContext);\r\n  const searchRef = useRef();\r\n\r\n  const onEnter = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSearch();\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      const {\r\n        data: { items },\r\n      } = await GetYoutube(searchRef.current.value);\r\n\r\n      setVideoList(items);\r\n      // setSelectedVideo(items[0]);\r\n    } catch (error) {\r\n      console.log(`Error : ${error}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSearch();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container-searchbar\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        ref={searchRef}\r\n        onKeyPress={onEnter}\r\n        className=\"search-input\"\r\n      />\r\n      <button onClick={()=> handleSearch} className=\"search-btn\">\r\n        Search\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React, { useContext } from \"react\";\r\nimport \"./Videolist.css\";\r\nimport VideoContext from \"../contexts/VideoContext\";\r\n\r\nfunction Videolist() {\r\n  const { videoList, setVideoSelected } = useContext(VideoContext);\r\n\r\n  return (\r\n    <div className=\"container-videolist\">\r\n      {videoList\r\n        ? videoList.map((video, index) => (\r\n            <div key={index}>\r\n              <p>{video.snippet.title}</p>\r\n              <img\r\n                alt=\"thumbnail\"\r\n                src={video.snippet.thumbnails.medium.url}\r\n                onClick={() => setVideoSelected(index)}\r\n                width={400}\r\n                height={250}\r\n              />\r\n            </div>\r\n          ))\r\n        : \"\"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Videolist;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport VideoContext from \"./contexts/VideoContext\";\nimport Video from \"./components/Video\";\nimport Searchbar from \"./components/Searchbar\";\nimport Videolist from \"./components/Videolist\";\n\nfunction App() {\n\n  const [ videoList , setVideoList ] = useState([]);\n  const [ videoSelected , setVideoSelected ] = useState();\n\n  return (\n    <div className=\"container\">\n      iPeach Tube\n      <VideoContext.Provider value={{ videoList , setVideoList , videoSelected , setVideoSelected }} >\n      <Searchbar className=\"searchBar\" />\n      <Video />\n      <Videolist />\n      </VideoContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}